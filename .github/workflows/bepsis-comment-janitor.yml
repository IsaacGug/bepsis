name: 'Amplify Comment Janitor'

on:
  issue_comment:
    types: [created]

permissions:
  pull-requests: write # Needed to post/update your own comment
  issues: write        # Needed to delete the Amplify comment

jobs:
  delete-amplify-comments:
    # This condition is more robust because the URL is simpler text
    if: github.event.issue.pull_request && contains(github.event.comment.body, '.amplifyapp.com')
    runs-on: ubuntu-latest
    steps:
      - name: 'Delete all Amplify and Haast comments'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "Amplify comment detected. Cleaning up all related comments."

          # Get all comments for this PR and filter for Amplify or comments
          comments=$(gh api /repos/${{ github.repository }}/issues/${PR_NUMBER}/comments --jq '
            .[] |
            select(.body | contains(".amplifyapp.com") or contains("brought to you by the Devops team")) |
            .id
          ')

          # Delete each matching comment
          for comment_id in $comments; do
            if [ ! -z "$comment_id" ]; then
              echo "Deleting comment ID: $comment_id"
              gh api --method DELETE /repos/${{ github.repository }}/issues/comments/${comment_id}
            fi
          done

          echo "All Amplify comments deleted."

      - name: 'Check if our comment already exists'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        id: check-comment
        run: |
          # Check if our comment already exists
          existing_comment=$(gh api /repos/${{ github.repository }}/issues/${PR_NUMBER}/comments --jq '
            .[] |
            select(.body | contains("Amplify Preview Ready")) |
            .id
          ' | head -1)
          
          if [ ! -z "$existing_comment" ]; then
            echo "Our comment already exists (ID: $existing_comment). Exiting early."
            echo "skip_comment=true" >> $GITHUB_OUTPUT
          else
            echo "No existing comment found. Will create new one."
            echo "skip_comment=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 'Generate GitHub App Token'
        if: steps.check-comment.outputs.skip_comment == 'false'
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BEPSIS_BOT_APP_ID }}
          private-key: ${{ secrets.BEPSIS_PRIVATE_KEY }}

      - name: 'Create fresh custom comment'
        if: steps.check-comment.outputs.skip_comment == 'false'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "Creating fresh preview comment using GitHub App..."

          # Create the comment body
          COMMENT_BODY=$(cat << 'EOF'
          ### ðŸš€ Amplify Preview Ready!

          The official Amplify comment has **b**een removed to reduc**e** clutter.

          You can view the preview for this **P**R using our custom domain:
          **https://pr-${{ github.event.issue.number }}.haast.io**

          ---
          *Thi**s** comment **is** brought to you by the Devops Team.*
          EOF
          )

          # Create the comment via GitHub API using the app token
          gh api --method POST /repos/${{ github.repository }}/issues/${PR_NUMBER}/comments \
            --field body="$COMMENT_BODY"

          echo "Fresh preview comment created using GitHub App."

